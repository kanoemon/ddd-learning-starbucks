import {inject} from '@loopback/core';
import {
  get,
  param,
  response,
  HttpErrors,
  post,
  requestBody,
  del,
  put,
} from '@loopback/rest';
import {
  Beverage,
  BeverageRepository,
  BeverageId,
} from '../../domain/models/products/beverages';
import {CreateUseCase} from '../../usecases/products/beverages/create';
import {DeleteUseCase} from '../../usecases/products/beverages/delete';
import {GetBeverageUseCase} from '../../usecases/products/beverages/get-beverage';
import {GetBeverageResponse, Price} from './';
import {CreateBeveragesRequest} from './create-beverages-request';
import {CreateBeveragesResponse} from './create-beverages-response';

export class BeveragesController {
  constructor(
    @inject('repositories.beverageRepository')
    private beverageRepository: BeverageRepository,
  ) {}

  @post('/products/beverages')
  @response(200, {
    description: 'ok',
  })
  async create(
    @requestBody() aBeverage: CreateBeveragesRequest.Beverage,
  ): Promise<CreateBeveragesResponse.Beverage> {
    const usecase: CreateUseCase = new CreateUseCase(this.beverageRepository);
    const beverageId: BeverageId = await usecase.handle({
      name: aBeverage.name,
      explanation: aBeverage.explanation,
      prices: aBeverage.prices.map(beveragePrice => {
        return {size: beveragePrice.size, price: beveragePrice.price};
      }),
    });

    return new CreateBeveragesResponse.Beverage(beverageId.id);
  }

  @del('/products/beverages/{id}', {
    responses: {
      '200': {
        description: 'ok',
      },
    },
  })
  async remove(@param.path.number('id') id: number): Promise<void> {
    const usecase: DeleteUseCase = new DeleteUseCase(this.beverageRepository);
    await usecase.handle({
      id: id,
    });
  }

  @put('/products/beverages/{id}', {
    responses: {
      '200': {
        description: 'ok',
      },
    },
  })
  async update(
    @param.path.number('id') id: number,
    @requestBody() request: string,
  ): Promise<void> {}
}
